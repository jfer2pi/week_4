# However, ordered factors are different and can be > or < another factor
# Create speed_vector
speed_vector <- c("fast", "slow", "slow", "fast","insane")
# To create an ordered factor we use further arguments in the factor() function
factor_speed_vector <- factor(speed_vector, ordered = T, level = c("slow", "fast", "insane"))
factor_speed_vector
summary(factor_speed_vector)
# Factors
# The term factor refers to a statistical data type used to store categorical
# variables. The difference between a categorical variable and a continuous variable
# is that a categorical variable can belong to a limited number of categories.
# A continuous variable, on the other hand, can correspond to an infinite number
# of values.
# It is important that R knows whether it is dealing with a continuous
# or a categorical variable, as the statistical models you will develop in
# the future treat both types differently. (You will see later why this is the case.)
# A good example of a categorical variable is the variable 'Gender'.
# A human individual can either be "Male" or "Female", making abstraction
# of inter-sexes. So here "Male" and "Female" are, in a simplified sense,
# the two values of the categorical variable "Gender",
# and every observation can be assigned to either the value "Male" of "Female".
theory <- "factors for categorical variables"
# Example, gender vector
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
# Converting to a factor
factor_gender_vector <- factor(gender_vector)
factor_gender_vector
# There are two types of factors, nominal and ordinal, where
# nominal has no implied order such as "monkey", "giraffe",
# and "elephant" whereas ordinal factors have an implied order
# such as "low", "medium", and "high"
# Example of a nominal factor
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
# Example of an ordinal factor
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
# We can change the levels within each factor through the levels() function
# Build factor with 2 levels "F" and "M" for "Female" and "Male"
# Note that these are always assigned on an alphabetical basis
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
# Specifying that "M" is for male and "F" is for female
levels(factor_survey_vector) <- c("Female","Male")
factor_survey_vector
# Unordered Factors cannot be said to be greater than or less than another factor
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
# Male
male <- factor_survey_vector[1]
# Female
female <- factor_survey_vector[2]
# Battle of the sexes: Male 'larger' than female?
male > female
# However, ordered factors are different and can be > or < another factor
# Create speed_vector
speed_vector <- c("fast", "slow", "slow", "fast","insane")
# To create an ordered factor we use further arguments in the factor() function
factor_speed_vector <- factor(speed_vector, ordered = T, level = c("slow", "fast", "insane"))
factor_speed_vector
summary(factor_speed_vector)
# Comparing orderered factors
da2 <- factor_speed_vector[2]
da5 <- factor_speed_vector[5]
da2 > da5
#Define different variables with diff data types
my_numeric <- 42
my_char <- "fernando"
my_logical <- TRUE
#Print data types
class(my_numeric)
class(my_char)
class(my_logical)
#Create a vector, which is a 1D array that can hold numeric, strings
#or booleans, it is a simple tool to store data
#Vectors are created with the COMBINE function c()
vegas <- "Go!"
numeric_vector <- c(1, 2, 3)
char_vector <- c("a", "b", "c")
boolean_vector <- c(T,F,T)
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <-  c(-24, -50, 100, -350, 10)
# Naming a vector
# We can assign names to the vector elements with the NAMES function names()
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
# Assign days as names of poker_vector
names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign days as names of roulette_vectors
names(roulette_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# The variable days_vector
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign the names of the day to roulette_vector and poker_vector
names(poker_vector) <-  days_vector
names(roulette_vector) <- days_vector
#Avoid code duplication at all times!
#Adding vectors
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)
# Take the sum of A_vector and B_vector
total_vector <- A_vector + B_vector
# Print out total_vector
total_vector
#Vegas continues...
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Assign to total_daily how much you won/lost on each day
total_daily <- poker_vector + roulette_vector
#We can add the elements in a vector throuth the SUM function sum()
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Total winnings with poker
total_poker <- sum(poker_vector)
# Total winnings with roulette
total_roulette <- sum(roulette_vector)
# Total winnings overall
total_week <- total_roulette + total_poker
# Print out total_week
total_week
#Comparing two vector sums with the > or < operators gives a boolean T or F output
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Calculate total gains for poker and roulette
total_poker <- sum(poker_vector)
total_roulette <- sum(roulette_vector)
# Check if you realized higher total gains in poker than in roulette
total_poker > total_roulette
# Select a single element through vector_name[element_number]
# Define a new variable based on a selection
poker_wednesday <- poker_vector[3]
poker_wednesday
#Multiple selection can be done in various ways
poker_midweek <- poker_vector[c(2,3,4)]
#OR
poker_beginweek <- poker_vector[1:3]
#OR
poker_endweek <- poker_vector[c(3:5)]
#We can also select vector elements through their names
poker_start <- poker_vector[c("Monday","Tuesday","Wednesday")]
#We can find the AVERAGE of a vector through the mean() function
mean(poker_start)
#We can also select by logical operators, such as <, >, <=, >=, ==, !=
# Which days did you make money on poker?
selection_vector <- poker_vector > 0
# Print out selection_vector
selection_vector
# We can use the selection vector to select elements from the vector
poker_vector[selection_vector]
mtcars
head(mtcars)
tail(mtcars)
str(mtcars)
planets_df <- data.frame(name, type, diameter, rotation, rings)
# Creating data frames is easy, in this example, we create data based on the 8 planets
# First, we define the vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Then we put them together into a dataframe utilizing the data.frame() function
planets_df <- data.frame(name, type, diameter, rotation, rings)
planets_df
str(planets_df)
# A data frame has the variables of a data set as columns and the observations
# as rows. This will be a familiar concept for those coming from different
# statistical software packages such as SAS or SPSS.
# These vary from matrices as matrices in R allow only one data type while dfs
# allow for multiple data types
# R has built in data frames, such as mtcars
mtcars
# mtcars is a big dataset, and we can use head() to see the top portion and
# tail() to see the bottom portion
head(mtcars)
tail(mtcars)
# We can also find out quick facts about our data with the str() (structure) function
str(mtcars)
# Creating data frames is easy, in this example, we create data based on the 8 planets
# First, we define the vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Then we put them together into a dataframe utilizing the data.frame() function
planets_df <- data.frame(name, type, diameter, rotation, rings)
planets_df
# We can explore the structure of our dataframe
str(planets_df)
# We can select elements within the dataframe through the use of square brackets,
# my_df[1,2] selects the value and the first row and second column in my_df
# my_df[1:3,2:4] selects rows 1,2,3 and columns 2,3,4 in my_df
# We can select all elements in a row or column by writing my_df[1,] selects all
# elements in row 1
# Select diamater of Mercury
planets_df[1,3]
# Select all Mars data
planets_df[4,]
planets_df[1:3,2]
planets_df[1:3,2]
# or by writing this
planets_df[1:3,"type"]
planets_df[1:5,"diameter"]
planets_df$diameter
# A data frame has the variables of a data set as columns and the observations
# as rows. This will be a familiar concept for those coming from different
# statistical software packages such as SAS or SPSS.
# These vary from matrices as matrices in R allow only one data type while dfs
# allow for multiple data types
# R has built in data frames, such as mtcars
mtcars
# mtcars is a big dataset, and we can use head() to see the top portion and
# tail() to see the bottom portion
head(mtcars)
tail(mtcars)
# We can also find out quick facts about our data with the str() (structure) function
str(mtcars)
# Creating data frames is easy, in this example, we create data based on the 8 planets
# First, we define the vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Then we put them together into a dataframe utilizing the data.frame() function
planets_df <- data.frame(name, type, diameter, rotation, rings)
planets_df
# We can explore the structure of our dataframe
str(planets_df)
# We can select elements within the dataframe through the use of square brackets,
# my_df[1,2] selects the value and the first row and second column in my_df
# my_df[1:3,2:4] selects rows 1,2,3 and columns 2,3,4 in my_df
# We can select all elements in a row or column by writing my_df[1,] selects all
# elements in row 1
# Select diamater of Mercury
planets_df[1,3]
# Select all Mars data
planets_df[4,]
# We can also use variable names to select columns in a data frame
# We can select the first three elements of the type column in planets_df,
# by writing
planets_df[1:3,2]
# or by writing this
planets_df[1:3,"type"]
# Select the first 5 values in the "diameter" column of planets_df
planets_df[1:5,"diameter"]
# We also have a further shortcut, as shown below
planets_df$diameter
#Select the rings column and name it ring_vector
ring_vector <- planets_df$rings
ring_vector
planets_df[rings_vector,]
planets_df$diameter
#Select the rings column and name it ring_vector
rings_vector <- planets_df$rings
rings_vector
# We can use rings_vector to select only the planets with rings
planets_df[rings_vector,]
subset(planets_df, subset = rings)
rings
subset(planets_df, subset = diameter < 1)
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
?gl
swirl()
# Programming in R swirl exercises
# Week 1
# Install swirl
install.packages("swirl")
# Load swirl
library(swirl)
# Install R Programming Course
install_from_swirl("R Programming")
# Start swirl
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range) -> shape_mat
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)).
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique) -> unique_vals
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
summary(flags)
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean )
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
data(iris)
data("iris")
iris
tapply(iris$Sepal.Length, iris$Species, mean)
round(tapply(iris$Sepal.Length, iris$Species, mean))
head(iris)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
range(tapply(mtcars$hp, mtcars$cyl, mean))
range(tapply(mtcars$hp, mtcars$cyl, mean))
> tapply(mtcars$hp, mtcars$cyl, mean)[3]-> tapply(mtcars$hp, mtcars$cyl, mean)
[1]
> tapply(mtcars$hp, mtcars$cyl, mean)[3]-> tapply(mtcars$hp, mtcars$cyl, mean)[1]
> tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1]
209.21429 - 82.63636
round(209.21429 - 82.63636)
debug(ls)
ls()
3
2
1
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[3]
tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1]
ls()
getwd()
?<<-
?`<<-``
?`<<-`
?matrix
matrix(rnorm(16), 4,4)
solve(matrix(rnorm(16), 4,4))
matrix(c(2,1,3,4), 2,2)
solve(matrix(c(2,1,3,4), 2,2))
> matrix(c(2,1,3,4), 2,2) %*% > matrix(c(2,1,3,4), 2,2)
> matrix(c(2,1,3,4), 2,2) %*% matrix(c(2,1,3,4), 2,2)
matrix(c(2,1,3,4), 2,2) %*% matrix(c(2,1,3,4), 2,2)
matrix(c(2,1,3,4), 2,2) * matrix(c(2,1,3,4), 2,2)
matrix(c(2,1,3,4), 2,2) * solve(matrix(c(2,1,3,4), 2,2))
matrix(c(2,1,3,4), 2,2) %*% solve(matrix(c(2,1,3,4), 2,2))
matrix(c(2,1,3,4), 100,100) %*% solve(matrix(c(2,1,3,4), 100,100))
matrix(c(2,1,3,4), 100,100)
setinv <- function(solve) m <<- solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("Obtaining cached data")
return(m)
}
data <- x$get()
m <- solve(mat, ...)
x$setinv(m)
m
}
c <- matrix(c(1:100), 10, 10)
c
cacheSolve(c)
makeCacheMatrix(c)
test <- makeCacheMatrix(c)
test
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinv(x)
if(!is.null(m)) {
message("Obtaining cached data")
return(m)
}
data <- x$get()
m <- solve(mat, ...)
x$setinv(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("Obtaining cached data")
return(m)
}
data <- x$get()
m <- solve(mat, ...)
x$setinv(m)
m
}
cacheSolve(c)
cacheSolve(test)
cacheSolve(test, c)
cacheSolve(test, mat = c)
solve(c)
c <- matrixrnorm(1:100), 10, 10)
c <- matrix(rnorm(1:100), 10, 10)
c
test <- makeCacheMatrix(c)
test
cacheSolve(test, c)
cacheSolve(test, c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("Obtaining cached data")
return(m)
}
data <- x$get()
m <- solve(...)
x$setinv(m)
m
}
cacheSolve(test, c)
cacheSolve(test, c) -> testinv
testinv
test %*% testinv
c %*% testinv
round(c %*% testinv()
round(c %*% testinv)
c %*% testinv
c %*% testinv -> temp
round(temp)
test
?first
?head
setwd("~/Dropbox/Coursera DS/week_4")
